 ------
 Introducciónn
 ------
 José Ángel García Sánchez
 ------
 2011-03-01
 ------

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

OpenCms Module Maven Plugin 

 El plugin de módulos de OpenCms se responsabiliza de recoger todos los artefactos dependencias,
 clases y recursos de un 
 OpenCms Module Plugin is responsible for collecting all artifact dependencies, classes
 and resources of a OpenCms module and packaging them into a module archive. Can generate
 the corresponding manifest via set of file descriptors, or adding a manifest provided.

* Goals Overview

 * {{{module-mojo.html}opencms:module}} is the default goal invoked during the <<<package>>> phase for projects with a packaging
   type of <<<opencms-module>>>. It builds a OpenCms zip module file.

 * {{{install-module-mojo.html}opencms:install-module}} Copy the OpenCms zip module file to a local OpenCms application,
   and installs it through its CmsShell.

 * {{{reload-app-mojo.html}opencms:reload-app}} another variation of <<<war:explode>>> where the webapp is instead generated in the
   web source directory, which is <<<src/main/webapp>>> by default.

 * {{{svnsync-mojo.html}opencms:svnsync}} generates a manifest for this webapp. The manifest file is created in the
   <<<warSourceDirectory>>>.

* Usage

  General instructions on how to use the WAR Plugin can be found on the {{{usage.html}usage page}}. Some more
  specific use cases are described in the examples given below. To share common resources across multiple web
  applications, see the documentation about using {{{overlays.html}overlays}}. Last but not least, users occasionally
  contribute additional examples, tips or errata to the
  {{{http://docs.codehaus.org/display/MAVENUSER/WAR+Plugin}plugin's wiki page}}.

  In case you still have questions regarding the plugin's usage, please have a look at the {{{faq.html}FAQ}} and feel
  free to contact the {{{mail-lists.html}user mailing list}}. The posts to the mailing list are archived and could
  already contain the answer to your question as part of an older thread. Hence, it is also worth browsing/searching
  the {{{mail-lists.html}mail archive}}.

  If you feel like the plugin is missing a feature or has a defect, you can fill a feature request or bug report in our
  {{{issue-tracking.html}issue tracker}}. When creating a new issue, please provide a comprehensive description of your
  concern. Especially for fixing bugs it is crucial that the developers can reproduce your problem. For this reason,
  entire debug logs, POMs or most preferably little demo projects attached to the issue are very much appreciated.
  Of course, patches are welcome, too. Contributors can check out the project from our
  {{{source-repository.html}source repository}} and will find supplementary information in the
  {{{http://maven.apache.org/guides/development/guide-helping.html}guide to helping with Maven}}.

* Examples

 To provide you with better understanding on some usages of the Maven WAR Plugin,
 you can take a look into the following examples:

 * {{{examples/adding-filtering-webresources.html}Adding and Filtering External Web Resources}}

 * {{{examples/war-manifest-guide.html}WAR Manifest Customization}}

 * {{{examples/rapid-testing-jetty6-plugin.html}Rapid Testing the Jetty Plugin}}

 * {{{examples/skinny-wars.html}Creating Skinny WARs}}

 * {{{examples/file-name-mapping.html}Using File Name Mapping}}

* Related links

  * {{{http://maven.apache.org/guides/mini/guide-archive-configuration.html}Exclusion of Maven Descriptors}}

